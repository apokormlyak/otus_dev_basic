"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
from pathlib import Path

import dj_database_url
import environ

env = environ.Env()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "DJANGO_SECRET_KEY", default="34-o=tlv0w8@nlsj^@aa00n9p%s)jr)k26xrg43n2un6og75e("
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DJANGO_DEBUG", default=True)


ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=["*"])

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "warehouses.apps.WarehousesConfig",
]

# backend/server/server/settings.py
MEDIA_URL = env("DJANGO_MEDIA_URL", default="/media/")
STATIC_URL = env("DJANGO_STATIC_URL", default="/backend_static/")
STATIC_ROOT = BASE_DIR / "django_static"

# django-rest-framework
# -------------------------------------------------------------------------------
# drf -  https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_PARSER_CLASSES": ["rest_framework.parsers.JSONParser"],
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
}
DJOSER_PERMISSIONS = {
    "activation": ["rest_framework.permissions.IsAdminUser"],
    "password_reset": ["rest_framework.permissions.IsAdminUser"],
    "password_reset_confirm": ["rest_framework.permissions.IsAdminUser"],
    "set_password": ["rest_framework.permissions.IsAdminUser"],
    "username_reset": ["rest_framework.permissions.IsAdminUser"],
    "username_reset_confirm": ["rest_framework.permissions.IsAdminUser"],
    "set_username": ["rest_framework.permissions.IsAdminUser"],
    "user_create": ["rest_framework.permissions.IsAdminUser"],
    "user_delete": ["rest_framework.permissions.IsAdminUser"],
    "user": ["rest_framework.permissions.IsAuthenticated"],
    "user_list": ["rest_framework.permissions.IsAdminUser"],
    "token_create": ["rest_framework.permissions.AllowAny"],
    "token_destroy": ["rest_framework.permissions.IsAuthenticated"],
}


DJOSER = {"USER_ID_FIELD": "username", "PERMISSIONS": DJOSER_PERMISSIONS}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "settings.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]
CORS_ORIGIN_ALLOW_ALL = env("DJANGO_CORS_ORIGIN_ALLOW_ALL", default=False)
CORS_ORIGIN_WHITELIST = env.list(
    "DJANGO_CORS_ORIGIN_WHITELIST",
    default=[
        "http://localhost",
        "http://localhost:8888",
        "http://0.0.0.0:8000",
        "http://0.0.0.0:8888",
        "http://django",
        "http://127.0.0.1:8000",
        "http://0.0.0.0",
        "http://localhost:3000",
    ],
)

CORS_ALLOWED_ORIGINS = env.list(
    "CORS_ALLOWED_ORIGINS",
    default=[
        "http://localhost:3000",
        "http://localhost:8888",
        "http://localhost:8000",
        "http://0.0.0.0:8000",
    ],
)

WSGI_APPLICATION = "settings.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases


DATABASES = {
    "default": dj_database_url.config(
        default="postgres://{0}:{1}@{2}:{3}/{4}".format(
            env("DJANGO_POSTGRES_USER", default="admin"),
            env("DJANGO_POSTGRES_PASSWORD", default="password"),
            env("DJANGO_POSTGRES_HOST", default="postgres"),
            env("DJANGO_POSTGRES_PORT", default="5432"),
            env("DJANGO_POSTGRES_DB", default="storaging_db"),
        ),
    )
}

DATABASES["default"]["ATOMIC_REQUESTS"] = True


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


SERVER_URI = env("SERVER_URI", default="http://0.0.0.0:8000")

# drf-spectacular
SPECTACULAR_SERVERS = env.list(
    "SPECTACULARS_SERVERS",
    default=["http://django", "http://127.0.0.1:8000", "http://localhost:8000"],
)
SPECTACULAR_SETTINGS_TITLE = env("SPECTACULAR_SETTINGS_TITLE", default="Django project")
SPECTACULAR_SETTINGS = {
    "TITLE": SPECTACULAR_SETTINGS_TITLE,
    "SERVERS": [{"url": s} for s in SPECTACULAR_SERVERS],
    "SCHEMA_PATH_PREFIX": r"/api/",
}
